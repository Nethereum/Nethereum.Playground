
using System;
using System.Text;
using System.Collections.Generic;
using Nethereum.Signer.EIP712;
using Nethereum.Util;
using Nethereum.ABI.FunctionEncoding.Attributes;
using Nethereum.Signer;

///EIP-712: Ethereum typed structured data hashing and signing
///This example demonstrates how to create a compatible Typed data schema definition 
/// For more information about the standard check: https://eips.ethereum.org/EIPS/eip-712
public class TypedDataSigningUsingEIP712_V4
{
	static void Main(string[] args)
	{
		var signer = new Eip712TypedDataSigner();

		//The mail typed definition, this provides the typed data schema used for this specific domain
		var typedData = GetMailTypedDefinition();

		//The data we are going to sign (Primary type) mail
		var mail = new Mail
		{
			From = new Person
			{
				Name = "Cow",
				Wallets = new List<string> { "0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826", "0xDeaDbeefdEAdbeefdEadbEEFdeadbeEFdEaDbeeF" }
			},
			To = new List<Person>
				{
					new Person
					{
						Name = "Bob",
						Wallets = new List<string> { "0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB", "0xB0BdaBea57B0BDABeA57b0bdABEA57b0BDabEa57", "0xB0B0b0b0b0b0B000000000000000000000000000" }
					}
				},
			Contents = "Hello, Bob!"
		};

		//This type data is specific to the chainId 1
		typedData.Domain.ChainId = 1;

		var key = new EthECKey("94e001d6adf3a3275d5dd45971c2a5f6637d3e9c51f9693f2e678f649e164fa5");
		Console.WriteLine("Signing address: " + key.GetPublicAddress());

		var signature = signer.SignTypedDataV4(mail, typedData, key);

		Console.WriteLine("Signature: " + signature);

		var addressRecovered = signer.RecoverFromSignatureV4(mail, typedData, signature);
		var address = key.GetPublicAddress();
		Console.WriteLine("Recovered address from signature:" + address);
	}

	//GetMailTypedDefinition is the generic function that contains all the metadata required to sign this domain specific message
	//All the different types (Domain, Group, Mail, Person) are defined as classes in a similar way to Nethereum Function Messages
	//In the standard you need to provide the Domain, this can be extended with your own type,
	//The different types that are pare of the domain
	//and the PrimaryType which is the message entry point
	public static TypedData<Domain> GetMailTypedDefinition()
	{
		return new TypedData<Domain>
		{
			Domain = new Domain
			{
				Name = "Ether Mail",
				Version = "1",
				ChainId = 1,
				VerifyingContract = "0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC"
			},
			Types = MemberDescriptionFactory.GetTypesMemberDescription(typeof(Domain), typeof(Group), typeof(Mail), typeof(Person)),
			PrimaryType = nameof(Mail),
		};
	}

	//The domain type Mail is defined in a similar way to a Nethereum Function Message, with the attribute Struct("Mail")
	//Parameters are the same, although when working with tuples we need to provide the name of the Tuple like "Person" or "Person[]" if it is an array
	[Struct("Mail")]
	public class Mail
	{
		[Parameter("tuple", "from", 1, "Person")]
		public Person From { get; set; }

		[Parameter("tuple[]", "to", 2, "Person[]")]
		public List<Person> To { get; set; }

		[Parameter("string", "contents", 3)]
		public string Contents { get; set; }
	}

	[Struct("Person")]
	public class Person
	{
		[Parameter("string", "name", 1)]
		public string Name { get; set; }

		[Parameter("address[]", "wallets", 2)]
		public List<string> Wallets { get; set; }
	}

	[Struct("Group")]
	public class Group
	{
		[Parameter("string", "name", 1)]
		public string Name { get; set; }

		[Parameter("tuple[]", "members", 2, "Person[]")]
		public List<Person> Members { get; set; }
	}

}
