@using Microsoft.AspNetCore.Components.Authorization
@using Nethereum.UI
@implements IDisposable;
@inject MetamaskHostProvider _metamaskHostProvider;
@inject SelectedEthereumHostProviderService _selectedHostProvider;

<div>
    @if (MetamaskAvailable)
    {
        <AuthorizeView Roles="EthereumConnected">
            <Authorized>
               <button type="button" class="btnMetamask" @onclick="@EnableEthereumAsync">@Truncate(SelectedAccount, 10)</button>
            </Authorized>
            <NotAuthorized>
                <button type="button" class="btnMetamask" @onclick="@EnableEthereumAsync">Connect Metamask</button>
            </NotAuthorized>
        </AuthorizeView>
    }else{
          <button class="btnMetamask" disabled>Please Install Metamask</button>   
    }
</div>

@code {

    bool MetamaskAvailable { get; set; }
    string SelectedAccount { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _metamaskHostProvider.SelectedAccountChanged += MetamaskHostProvider_SelectedAccountChanged;
            MetamaskAvailable = await _metamaskHostProvider.CheckProviderAvailabilityAsync();
            if (MetamaskAvailable)
            {
                SelectedAccount = await _metamaskHostProvider.GetProviderSelectedAccountAsync();
                if (!string.IsNullOrEmpty(SelectedAccount))
                {
                    await _selectedHostProvider.SetSelectedEthereumHostProvider(_metamaskHostProvider);
                }

            }
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        _metamaskHostProvider.SelectedAccountChanged -= MetamaskHostProvider_SelectedAccountChanged;
    }

    private async Task MetamaskHostProvider_SelectedAccountChanged(string account)
    {
        SelectedAccount = account;
        this.StateHasChanged();
    }

    protected async Task EnableEthereumAsync()
    {
        SelectedAccount = await _metamaskHostProvider.EnableProviderAsync();
        await _selectedHostProvider.SetSelectedEthereumHostProvider(_metamaskHostProvider);
         StateHasChanged();
    }

    public static string Truncate(string? value, int maxLength, string truncationSuffix = "…")
    {
        return value?.Length > maxLength
            ? value.Substring(0, maxLength) + truncationSuffix
            : value;
    }
   
}

