using System;
using System.Text;
using Nethereum.Hex.HexConvertors.Extensions;
using System.Threading.Tasks;
using Nethereum.Web3;
using Nethereum.Web3.Accounts;
using Nethereum.Hex.HexConvertors.Extensions;
using Nethereum.RPC.TransactionManagers;
using Nethereum.Signer;

public class Program
{
    private static async Task Main(string[] args)
    {
        //First let's create an account with our private key for the account address 
        var privateKey = "0x7580e7fb49df1c861f0050fae31c2224c6aba908e116b8da44ee8cd927b990b0";
        var account = new Account(privateKey);
        Console.WriteLine("Our account: " + account.Address);
        //Now let's create an instance of Web3 using our account pointing to our nethereum testchain
        var web3 = new Web3(account, "http://testchain.nethereum.com:8545");

        var toAddress = "0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe";

        var transactionManager = web3.TransactionManager;
        var fromAddress = transactionManager?.Account?.Address;
        //Start setup:
        //Sending transaction
        var transactionInput = EtherTransferTransactionInputBuilder.CreateTransactionInput(fromAddress, toAddress, 1.11m, 2);
        //Raw transaction signed
        var rawTransaction = await transactionManager.SignTransactionAsync(transactionInput);
        var txnHash = await web3.Eth.Transactions.SendRawTransaction.SendRequestAsync(rawTransaction);
        //Getting the transaction from the chain
        var transactionRpc = await web3.Eth.Transactions.GetTransactionByHash.SendRequestAsync(txnHash);

        //Using the transanction from RPC to build a txn for signing / signed
        var transaction = TransactionFactory.CreateTransaction(transactionRpc.To, transactionRpc.Gas, transactionRpc.GasPrice, transactionRpc.Value, transactionRpc.Input, transactionRpc.Nonce,
                transactionRpc.R, transactionRpc.S, transactionRpc.V);

        //Get the raw signed rlp recovered
        var rawTransactionRecovered = transaction.GetRLPEncoded().ToHex();

        //Get the account sender recovered
        var accountSenderRecovered = string.Empty;
        if (transaction is TransactionChainId)
        {
            var txnChainId = transaction as TransactionChainId;
            accountSenderRecovered = EthECKey.RecoverFromSignature(transaction.Signature, transaction.RawHash, txnChainId.GetChainIdAsBigInteger()).GetPublicAddress();
        }
        else
        {
            accountSenderRecovered = EthECKey.RecoverFromSignature(transaction.Signature, transaction.RawHash).GetPublicAddress();
        }
        Console.WriteLine(rawTransaction);
        Console.WriteLine(rawTransactionRecovered);
        Console.WriteLine(web3.TransactionManager.Account.Address);
        Console.WriteLine(accountSenderRecovered);
    }
}