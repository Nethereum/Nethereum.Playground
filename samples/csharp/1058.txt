using System;
using System.Threading.Tasks;
using Nethereum.Web3;
using Nethereum.RPC.Eth.DTOs;
using Nethereum.Hex.HexTypes;
using Nethereum.Web3.Accounts;
using Nethereum.Util;

public class Program
{
	///This example signs a transaction, calculates its future hash and then sends the transaction as a raw transaction
	///demonstrating that a transaction can be created, and sent in the future and use the the transaction hash to track it.
	private static async Task Main(string[] args)
	{
		var privateKey = "0x7580e7fb49df1c861f0050fae31c2224c6aba908e116b8da44ee8cd927b990b0";
		var chainId = 444444444500; //Nethereum test chain, chainId
		var account = new Account(privateKey, chainId);
		Console.WriteLine("Our account: " + account.Address);
		//Now let's create an instance of Web3 using our account pointing to our nethereum testchain
		var web3 = new Web3(account, "http://testchain.nethereum.com:8545");
		web3.TransactionManager.UseLegacyAsDefault = true;
		var receiverAddress = "0x83F861941E940d47C5D53B20141912f4D13DEe64";

		var transactionInput = new TransactionInput
		{
			From = account.Address,
			To = receiverAddress,
			Value = new HexBigInteger(10000),
			Data = "0x",
			Gas = new HexBigInteger(150000),
			GasPrice = new HexBigInteger(2000000000)
		};

		var txnSigned = await web3.Eth.TransactionManager.SignTransactionAsync(transactionInput);
		var txnHash = TransactionUtils.CalculateTransactionHash(txnSigned);
		Console.WriteLine($"Transaction Hash: 0x{txnHash}");

		var transactionHash = await web3.Eth.TransactionManager.SendTransactionAsync(transactionInput);
		Console.WriteLine($"Transaction Hash returned by the node when sending the transaction : {transactionHash}");

		var _txnHash = "0x" + txnHash;
		Console.WriteLine($"Transaction Hashes are the same : {transactionHash == _txnHash}");

	}
}