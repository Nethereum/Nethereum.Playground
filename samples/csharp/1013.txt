using System;
using System.Text;
using System.Collections.Generic;
using Nethereum.Util;
using Nethereum.Signer;
using Nethereum.Hex.HexConvertors.Extensions;

public class Program
{
    public static void Main()
    {
        //This sample demonstrates how to sign a message with a private key 
        //and validate the signer later on by recovering the address of the signature.

        //Given an address with a private key
        var address = "0x94618601FE6cb8912b274E5a00453949A57f8C1e";
        var privateKey = "0x7580e7fb49df1c861f0050fae31c2224c6aba908e116b8da44ee8cd927b990b0";
        Console.WriteLine($"Address {address} with private key: {privateKey}");

        //And a message to sign
        var messageToSign = "wee test message 18/09/2017 02:55PM";

        //We can create an Ethereum signer. 
        //Note: the EthereumSigner is a specialised signer for messages that prefixes the messages with "x19Ethereum Signed Message:"
        var signer = new EthereumMessageSigner();

        //To sign a text message we UTF8 encoded it (byte array) first and then sign it
        var signature = signer.EncodeUTF8AndSign(messageToSign, new EthECKey(privateKey));
        Console.WriteLine($"Signature: {signature}");

        //To recover the address of the signer of a text message 
        //we first UTF8 encoded it (byte array) and then using the Elliptic Curve recovery we get the address.
        var addressRecovered = signer.EncodeUTF8AndEcRecover(messageToSign, signature);

        //We can validate the signature if the address matches
        Console.WriteLine($"Address recovered: {addressRecovered}");
    }
}