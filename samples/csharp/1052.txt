using Nethereum.ABI.FunctionEncoding.Attributes;
using Nethereum.Contracts;
using Nethereum.Web3;
using Nethereum.Web3.Accounts;
using System;
using System.Numerics;
using System.Threading.Tasks;

namespace NethereumSample
{
    public class ChangingDtoTypes
    {
        /*
         * Demonstrating how to change the .Net return type on properties within a code generated DTO
         * 
         * The generated code is designed for extension and flexibility
         */

        /// <summary>
        /// This partial class extends the code generated "Vehicle" class (see bottom of file)
        /// The code generated "Vehicle" class inherits the "VehicleBase" class.
        /// The base class has all of the properties which map to fields in Solidity.
        /// Because the code generated "Vehicle" class is marked as partial, it can be extended and modified.
        /// The code generator selects a default .Net return type for each property mapping to a field.
        /// In this case, the "Manufacturer" and "Model" fields on the "Vehicle" struct are of type bytes32 within Solidity.
        /// This is a common practice within Solidity for storing short strings as it can be more gas efficient.
        /// By default the code generator maps these to a .Net byte array (it is not safe to assume all bytes32 values are strings)
        /// There are encoders and decoders within Nethereum to convert byte arrays to a string.  (see Bytes32TypeEncoder and Bytes32TypeDecoder)
        /// However, if you know the values are actually strings, it is preferable for Nethereum to automatically decode to a string.
        /// To achieve this, we need to create our own partial class to extend and change the code generated class.
        /// Then we create "new" properties which replace the properties on the base class.
        /// </summary>
        public partial class Vehicle
        {
            [Parameter("bytes32", "manufacturer", 2)]
            public new string Manufacturer { get; set; } // note the "new" keyword and "string" return type

            [Parameter("bytes32", "model", 3)]
            public new string Model { get; set; }
        }

        static async Task Main(string[] args)
        {
            // contract deployment starts here //
            var url = "http://testchain.nethereum.com:8545";
            var privateKey = "0x7580e7fb49df1c861f0050fae31c2224c6aba908e116b8da44ee8cd927b990b0";
            var account = new Account(privateKey);
            var web3 = new Web3(account, url);
            Console.WriteLine($"Deploying Contract");
            var deploymentReceipt = await web3.Eth.GetContractDeploymentHandler<DecodeTestDeployment>().SendRequestAndWaitForReceiptAsync();
            Console.WriteLine($"Contract Address: {deploymentReceipt.ContractAddress}");
            // contract deployment ends here //

            // query a function on the contract to return a struct (e.g. a Vehicle)
            Console.WriteLine($"Querying Contract");
            var contractHandler = web3.Eth.GetContractHandler(deploymentReceipt.ContractAddress);
            var vehicleOutputDto = await contractHandler.QueryDeserializingToObjectAsync<GetVehicleFunction, GetVehicleOutputDTO>(
                new GetVehicleFunction { Id = 1 });

            // check that the manufacturer and model properties are strings (not byte[] arrays)
            Console.WriteLine($"Query Result");
            Console.WriteLine($"[Id] Expected: 1, Actual: {vehicleOutputDto.Vehicle.Id}");
            Console.WriteLine($"[Manufacturer] Expected: Ford, Actual: {vehicleOutputDto.Vehicle.Manufacturer}");
            Console.WriteLine($"[Model]: Expected: Fiesta, Actual: {vehicleOutputDto.Vehicle.Model}");
        }

        // generated code starts here

        public partial class DecodeTestDeployment : DecodeTestDeploymentBase
        {
            public DecodeTestDeployment() : base(BYTECODE) { }
            public DecodeTestDeployment(string byteCode) : base(byteCode) { }
        }

        public class DecodeTestDeploymentBase : ContractDeploymentMessage
        {
            public static string BYTECODE = "608060405234801561001057600080fd5b506040805160608082018352600180835263119bdc9960e21b60208085019182526546696573746160d01b858701908152600093845283825294517fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d5590517fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7e5592517fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7f558351918201845260028083526621b4ba3932b7b760c91b838501908152665069636173736f60c81b9584019586529082529252517fabbb5caa7dda850e60932de0934eb1f9d0f59695050f761dc64e443e5030a56955517fabbb5caa7dda850e60932de0934eb1f9d0f59695050f761dc64e443e5030a56a55517fabbb5caa7dda850e60932de0934eb1f9d0f59695050f761dc64e443e5030a56b5561011b806101606000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063df7ebb7b14602d575b600080fd5b603c603836600460ad565b6050565b6040516047919060c4565b60405180910390f35b6056608d565b5060009081526020818152604091829020825160608101845281548152600182015492810192909252600201549181019190915290565b604080516060810182526000808252602082018190529181019190915290565b60006020828403121560bd578081fd5b5035919050565b8151815260208083015190820152604091820151918101919091526060019056fea2646970667358221220221d2621dddf3b0ab6bb833c989433be3f4537e87199ed92f2af8635ab55083564736f6c63430006010033";
            public DecodeTestDeploymentBase() : base(BYTECODE) { }
            public DecodeTestDeploymentBase(string byteCode) : base(byteCode) { }

        }

        public partial class GetVehicleFunction : GetVehicleFunctionBase { }

        [Function("getVehicle", typeof(GetVehicleOutputDTO))]
        public class GetVehicleFunctionBase : FunctionMessage
        {
            [Parameter("uint256", "_id", 1)]
            public virtual BigInteger Id { get; set; }
        }

        public partial class GetVehicleOutputDTO : GetVehicleOutputDTOBase { }

        [FunctionOutput]
        public class GetVehicleOutputDTOBase : IFunctionOutputDTO
        {
            [Parameter("tuple", "_vehicle", 1)]
            public virtual Vehicle Vehicle { get; set; }
        }

        // This is the code generated "Vehicle" class
        // Note that it extends the "VehicleBase" class and is "partial"

        public partial class Vehicle : VehicleBase { }

        public class VehicleBase
        {
            [Parameter("uint256", "id", 1)]
            public virtual BigInteger Id { get; set; }
            [Parameter("bytes32", "manufacturer", 2)]
            public virtual byte[] Manufacturer { get; set; }
            [Parameter("bytes32", "model", 3)]
            public virtual byte[] Model { get; set; }
        }

        // Copy of Solidity code
        /*
pragma solidity ^0.6.1;
pragma experimental ABIEncoderV2;

contract DecodeTest {

    struct Vehicle {
        uint id;
        bytes32 manufacturer;
        bytes32 model;
    }

    mapping(uint => Vehicle) private vehicles;

    constructor() public {
        vehicles[1] = Vehicle(1, "Ford", "Fiesta");
        vehicles[2] = Vehicle(2, "Citreon", "Picasso");
    }

    function getVehicle(uint _id) public view returns (Vehicle memory _vehicle){
        return vehicles[_id];
    }
}
         */


    }
}