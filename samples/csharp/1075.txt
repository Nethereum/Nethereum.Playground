using Nethereum.Web3;
using Nethereum.ABI.FunctionEncoding.Attributes;
using Nethereum.Contracts.CQS;
using Nethereum.Util;
using Nethereum.Web3.Accounts;
using Nethereum.Hex.HexConvertors.Extensions;
using Nethereum.Contracts;
using Nethereum.Contracts.Extensions;
using System;
using System.Numerics;
using System.Threading;
using System.Threading.Tasks;

///This example demonstrates how to validate if a transaction is a call to a specific smart contract function using a Typed Message (Transfer Function)
// and the extensions for Transactions in Nethereum.Contracts
public class DecodeTransactionIntoFunctionMessageIfItMatchesSignature
{

	[Function("transfer", "bool")]
	public class TransferFunction : FunctionMessage
	{
		[Parameter("address", "_to", 1)]
		public string To { get; set; }

		[Parameter("uint256", "_value", 2)]
		public BigInteger TokenAmount { get; set; }
	}

	public static async Task Main()
	{
		var web3 = new Web3("https://mainnet.infura.io/v3/ddd5ed15e8d443e295b696c0d07c8b02");
		var txn = await web3.Eth.Transactions.GetTransactionByHash.SendRequestAsync("0x0404a0517a7443db1787b5461b9d5fc18546809419c0cc6a736599b60677ed71");
		//check if the transfer belongs to the Transfer Function if not ignore it
		if (txn.IsTransactionForFunctionMessage<TransferFunction>())
		{
			var transfer = new TransferFunction().DecodeTransaction(txn);
			Console.WriteLine(Web3.Convert.FromWei(transfer.TokenAmount));
			Console.WriteLine(transfer.To);
		}

	}
}